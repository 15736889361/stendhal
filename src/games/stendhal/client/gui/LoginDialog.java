/* $Id$ */
/***************************************************************************
 *                      (C) Copyright 2003 - Marauroa                      *
 ***************************************************************************
 ***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
package games.stendhal.client.gui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import java.io.*;
import java.util.StringTokenizer;

import games.stendhal.client.*;
import marauroa.client.*;

/**
 * Summary description for LoginDialog
 * 
 */
public class LoginDialog extends JDialog {
  // Variables declaration
  private JLabel usernameLabel;
  private JLabel serverLabel;
  private JLabel serverPortLabel;
  private JLabel passwordLabel;
  private JCheckBox saveLoginBox;
  
  private JTextField usernameField;
  private JPasswordField passwordField;
  private JComboBox serverField;
  private JTextField serverPortField;

  private JButton loginButton;

  private JPanel contentPane;

  // End of variables declaration
  private StendhalClient client;

  private Frame frame;

  public LoginDialog(Frame w, StendhalClient client) {
    super(w);
    this.client = client;
    frame = w;
    initializeComponent();

    this.setVisible(true);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Windows Form Designer. Otherwise, retrieving design
   * might not work properly. Tip: If you must revise this method, please
   * backup this GUI file for JFrameBuilder to retrieve your design properly
   * in future, before revising this method.
   */
  private void initializeComponent() {
    serverLabel = new JLabel();
    serverPortLabel = new JLabel();
    usernameLabel = new JLabel();
    passwordLabel = new JLabel();
    saveLoginBox = new JCheckBox();
    usernameField = new JTextField();
    passwordField = new JPasswordField();
    serverField = new JComboBox();
    serverField.setEditable(true);
    serverPortField = new JTextField();
    serverPortField.setEditable(true);
    loginButton = new JButton();
    contentPane = (JPanel) this.getContentPane();

    StringTokenizer loginInfo = new StringTokenizer(getLoginInfo());
      
    //
    // serverLabel
    //
    serverLabel.setText("Choose your Stendhal Server");
    //serverLabel.
    //
    // serverPortLabel
    //
    serverPortLabel.setText("Choose your Server-port");
    //
    // usernameLabel
    //
    usernameLabel.setText("Type your username");
    //
    // passwordLabel
    //
    passwordLabel.setText("Type your password");
    //
    // saveLoginBox
    //
    saveLoginBox.setText("Remember login info");
    //
    // serverField
    //
    serverField.addItem("stendhal.ombres.ambre.net");
    serverField.addItem("stendhal.game-server.cc");
    serverField.addItem("localhost");
    //
    // serverPortField
    //
    serverPortField.setText("32160");
    serverPortField.setHorizontalAlignment(JTextField.TRAILING);
    if(loginInfo.countTokens() == 2) {
      saveLoginBox.setSelected(true);
      //
      // usernameField
      //
      usernameField.setText(loginInfo.nextToken());
      //
      // passwordField
      //
      passwordField.setText(loginInfo.nextToken());
    }
    //
    // loginButton
    //
    loginButton.setText("Login to Server");
    loginButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        loginButton_actionPerformed(e, saveLoginBox.isSelected());
      }
    });
    //
    // contentPane
    //
    contentPane.setLayout(null);
    contentPane.setBorder(BorderFactory.createEtchedBorder());
    addComponent(contentPane, serverLabel, 10, 10, 190, 22);
    addComponent(contentPane, serverPortLabel, 10, 37, 190, 20);
    addComponent(contentPane, usernameLabel, 10, 70, 190, 20);
    addComponent(contentPane, passwordLabel, 10, 95, 190, 20);
    addComponent(contentPane, saveLoginBox, 10, 120, 190, 20);
    
    addComponent(contentPane, serverField, 200, 10, 190, 22);
    addComponent(contentPane, serverPortField, 200, 37, 40, 20);
    addComponent(contentPane, usernameField, 200, 70, 190, 20);
    addComponent(contentPane, passwordField, 200, 95, 190, 20);

    addComponent(contentPane, loginButton, 200, 120, 190, 30);
    //
    // LoginDialog
    //
    this.setTitle("Login to Server");
    this.setLocation(new Point(202, 124));
    this.setResizable(false);
    this.setSize(new Dimension(410, 205));
  }

  /** Add Component Without a Layout Manager (Absolute Positioning) */
  private void addComponent(Container container, Component c, int x, int y,
      int width, int height) {
    c.setBounds(x, y, width, height);
    container.add(c);
  }

  private void loginButton_actionPerformed(ActionEvent e, boolean saveLoginBoxStatus) {
    String username = usernameField.getText();
    String password = new String(passwordField.getPassword());
    String server = (String) serverField.getSelectedItem();
    int port = 32160;
    
    if(saveLoginBoxStatus)
      saveLoginInfo(username, password);
    
    try {
      port = Integer.parseInt(serverPortField.getText());
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "You typed in a invalid port, try again", "Invalid port", JOptionPane.WARNING_MESSAGE);
      return;
    }

    try {
      client.connect(server, port);
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "Stendhal can't find a Internet connection for getting online");
      System.exit(0);
    }

    try {
      if (client.login(username, password) == false) {
        String result = client.getEvent();
        if (result == null) {
          result = "Server is not available right now. Check it is online";
        }

        JOptionPane.showMessageDialog(this, result, "Login status", JOptionPane.ERROR_MESSAGE);
      } else {
        this.setVisible(false);
        frame.setVisible(false);
        stendhal.doLogin = true;
      }
    } catch (ariannexpTimeoutException ex) {
      JOptionPane.showMessageDialog(this, "Can't connect to server. Server down?", "Login status", JOptionPane.ERROR_MESSAGE);
    }
  }
  
  /*
   * Author: Da_MusH
   * Description: Methods for saving and loading login information to disk.
   *        These should probably make a separate class in the future,
   *        but it will work for now.
   */
  
  private void saveLoginInfo(String usrName, String pwd) {
    try {
      File loginFile = new File("user.dat");
      PrintWriter fos = new PrintWriter(loginFile);
      
      fos.print(usrName + " " + pwd);
      fos.close();
    } catch (IOException ioex) {
      JOptionPane.showMessageDialog(this, "Something went wrong when saving login information, nothing saved", "Login information save problem", JOptionPane.WARNING_MESSAGE);
    }
  }
  
  private String getLoginInfo() {
    
    String loginLine = "";
    
    try {
      FileReader fr = new FileReader("user.dat");
      BufferedReader fin = new BufferedReader(fr);
      
      loginLine = fin.readLine();
      if(loginLine == null)
        loginLine = "no_data";
      fin.close();
    } catch (FileNotFoundException fnfe) {
      loginLine = "no_file";
    }
    catch (IOException ioex) {
      JOptionPane.showMessageDialog(this, "Something went wrong when loading login information, nothing loaded", "Login information load problem", JOptionPane.WARNING_MESSAGE);
    }

    return loginLine;
  }
}

//
//
//
//
//
//
//
//
//
//
///* $Id$ */
///***************************************************************************
// *                      (C) Copyright 2003 - Marauroa                      *
// ***************************************************************************
// ***************************************************************************
// *                                                                         *
// *   This program is free software; you can redistribute it and/or modify  *
// *   it under the terms of the GNU General Public License as published by  *
// *   the Free Software Foundation; either version 2 of the License, or     *
// *   (at your option) any later version.                                   *
// *                                                                         *
// ***************************************************************************/
//package games.stendhal.client.gui;
//
//import java.awt.*;
//import java.awt.event.*;
//import javax.swing.*;
//
//import games.stendhal.client.*;
//import marauroa.client.*;
//
///**
// * Summary description for LoginDialog
// *
// */
//public class LoginDialog extends JDialog
//{
//	// Variables declaration
//	private JLabel usernameLabel;
//	private JLabel serverLabel;
//	private JLabel passwordLabel;
//	private JTextField usernameField;
//	private JPasswordField passwordField;
//	private JComboBox serverField;
//	private JButton loginButton;
//	private JPanel contentPane;
//	// End of variables declaration
//	private StendhalClient client;
//	private Frame frame;
//
//
//
//    public LoginDialog(Frame w, StendhalClient client)
//	{
//		super(w);
//		this.client=client;
//		frame=w;
//		initializeComponent();
//
//		this.setVisible(true);
//	}
//
//	/**
//	 * This method is called from within the constructor to initialize the form.
//	 * WARNING: Do NOT modify this code. The content of this method is always regenerated
//	 * by the Windows Form Designer. Otherwise, retrieving design might not work properly.
//	 * Tip: If you must revise this method, please backup this GUI file for JFrameBuilder
//	 * to retrieve your design properly in future, before revising this method.
//	 */
//	private void initializeComponent()
//	{
//		usernameLabel = new JLabel();
//		serverLabel = new JLabel();
//		passwordLabel = new JLabel();
//		usernameField = new JTextField();
//		passwordField = new JPasswordField();
//		serverField = new JComboBox();
//    serverField.setEditable(true);
//		loginButton = new JButton();
//		contentPane = (JPanel)this.getContentPane();
//
//		//
//		// usernameLabel
//		//
//		usernameLabel.setText("Type your username");
//		//
//		// serverLabel
//		//
//		serverLabel.setText("Choose your Stendhal Server");
//		//
//		// passwordLabel
//		//
//		passwordLabel.setText("Type your password");
//		//
//		// serverField
//		//
//                serverField.addItem("stendhal.ombres.ambre.net");
//		serverField.addItem("stendhal.game-server.cc");
//		serverField.addItem("localhost");
//
//		//
//		// loginButton
//		//
//		loginButton.setText("Login to Server");
//		loginButton.addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent e)
//			{
//				loginButton_actionPerformed(e);
//			}
//
//		});
//		//
//		// contentPane
//		//
//		contentPane.setLayout(null);
//		contentPane.setBorder(BorderFactory.createEtchedBorder());
//    addComponent(contentPane, serverLabel,   10,10,190,22);
//    addComponent(contentPane, usernameLabel, 10,45,190,20);
//		addComponent(contentPane, passwordLabel, 10,70,190,20);
//    addComponent(contentPane, serverField,   200,10,190,22);
//    addComponent(contentPane, usernameField, 200,45,190,20);
//		addComponent(contentPane, passwordField, 200,70,190,20);
//
//		addComponent(contentPane, loginButton,   200,120,190,30);
//		//
//		// LoginDialog
//		//
//		this.setTitle("Login to Server");
//		this.setLocation(new Point(202, 124));
//		this.setResizable(false);
//		this.setSize(new Dimension(410, 190));
//    }
//
//	/** Add Component Without a Layout Manager (Absolute Positioning) */
//	private void addComponent(Container container,Component c,int x,int y,int width,int height)
//	{
//		c.setBounds(x,y,width,height);
//		container.add(c);
//	}
//
//	private void loginButton_actionPerformed(ActionEvent e)
//	{
//        String username=usernameField.getText();
//        String password=new String(passwordField.getPassword());
//        String server=(String)serverField.getSelectedItem();
//
//    try
//      {
//      client.connect(server,32160);
//      }
//    catch(Exception ex)
//      {
//      JOptionPane.showMessageDialog(this, "Stendhal can't find a Internet connection for getting online");
//      System.exit(0);
//      }
//
//    try
//      {
//      if(client.login(username,password)==false)
//        {
//        String result=client.getEvent();
//        if(result==null)
//          {
//          result="Server is not available right now. Check it is online";
//          }
//          
//        JOptionPane.showMessageDialog(this, result ,"Login status",JOptionPane.ERROR_MESSAGE);
//        }
//      else
//        {
//        this.setVisible(false);
//        frame.setVisible(false);
//        stendhal.doLogin=true;
//        }
//      }
//    catch(ariannexpTimeoutException ex)
//      {
//      JOptionPane.showMessageDialog(this, "Can't connect to server. Server down?","Login status",JOptionPane.ERROR_MESSAGE);
//      }
//    }
//}
