<?xml version='1.0'?>

<project name="stendhal" default="compile" basedir=".">
	<!--
		Sets a property (by name and value), or set of properties (from file or resource) in the project. Properties are case sensitive.
		Properties are immutable: whoever sets a property first freezes it for the rest of the build; they are most definitely not variables.
	-->
	<property file="build.ant-private.properties"/>
	<property file="build.ant.properties"/>
  
	<property name="build_tests" value="${buildroot}/build_tests"/>
	<property name="build_client" value="${buildroot}/build_client"/>
	<property name="build_server_maps" value="${buildroot}/build_server_maps"/>

	<target name="init">
		<mkdir dir="${lib}"/>

		<!-- We update the version number -->
		<replaceregexp file="${src}/games/stendhal/common/Debug.java"
			match="public static final String VERSION ?= ?&quot;.*&quot;;"
			replace="public static final String VERSION = &quot;${version}&quot;;"
			byline="true"/>
		<replaceregexp file="${src}/games/stendhal/client/update/Version.java"
			match="public static final String VERSION ?= ?&quot;.*&quot;;"
			replace="public static final String VERSION = &quot;${version}&quot;;"
			byline="true"/>
		<replaceregexp file="web/html/stendhal.version"
			match=".*"
			replace="${version}"		
			byline="true"/>
		
		<!-- Update location of resources -->
		<replaceregexp file="${src}/games/stendhal/client/update/game-default.properties"
			match="GAME_NAME=.*"
			replace="GAME_NAME=${game_name}"
			byline="true"/>
		<replaceregexp file="${src}/games/stendhal/client/update/game-default.properties"
			match="DEFAULT_SERVER=.*"
			replace="DEFAULT_SERVER=${default_server}"
			byline="true"/>
		<replaceregexp file="${src}/games/stendhal/client/update/game-default.properties"
			match="UPDATE_SERVER_FOLDER=.*"
			replace="UPDATE_SERVER_FOLDER=${updates_server}"
			byline="true"/>
		<replaceregexp file="${src}/games/stendhal/client/update/game-default.properties"
			match="UPDATE_VERSION_CHECK=.*"
			replace="UPDATE_VERSION_CHECK=${version_server}"
			byline="true"/>
		
		<replaceregexp file="stendhal.jnlp"
			match="-0\..*\.jar&quot;"
			replace="-${version}.jar&quot;"
			byline="true"/>
	</target>

	<target name="clean">
		<delete dir="${lib}"/>
		<delete dir="${build_client}"/>
		<delete dir="${buildroot}/build_client_data/"/>
		<delete dir="${build_server}"/>
		<delete dir="${build_server_maps}"/>
		<delete dir="${buildroot}/build_server_quests/"/>
		<delete dir="${buildroot}/build_server_xmlconf/"/>
		<delete dir="${build_tests}"/>
		<delete dir="${buildroot}/build_tiled_convertmaps"/>
	</target>


<target name="server_build" depends="init" description="Build JAR file for Stendhal server">
		<property name="server_jarname" value="stendhal-server-${version}.jar"/>
		<property name="maps_jarname" value="stendhal-maps-${version}.jar"/>
		<property name="xmlconf_jarname" value="stendhal-xmlconf-${version}.jar"/>

		<mkdir dir="${build_server}/"/>

		<copy todir="${build_server}/data/conf/" file="data/conf/stendhalcreateaccount.properties"/>
		<copy todir="${build_server}/games/stendhal/server/" file="${src}/games/stendhal/server/stendhal_init.sql"/>

		<javac srcdir="${src}" destdir="${build_server}" debug="true" debuglevel="source,lines" source="1.5" target="1.5"
           includes="games/stendhal/server/**, games/stendhal/common/**" 
           excludes="games/stendhal/server/maps/**, games/stendhal/server/script/**, games/stendhal/client/**, games/stendhal/tools/**">
			<compilerarg value="-encoding"/>
			<compilerarg value="utf8"/>
			<compilerarg value="-Xlint:unchecked"/>
			<classpath>
				<pathelement path="${marauroa_jar}"/>
				<pathelement path="${log4j_jar}"/>
				<pathelement path="${junit_jar}"/>
				<pathelement path="${groovy_jar}"/>
				<pathelement path="${simple_jar}"/>
				<pathelement path="${velocity_jar}"/>
			</classpath>
		</javac>

		<jar jarfile="${lib}/${server_jarname}" basedir="${build_server}">
			<manifest>
				<attribute name="Class-path" value="${maps_jarname} ${xmlconf_jarname} log4j.jar groovy.jar velocity-1.4.jar velocity-dep-1.4.jar"/>
			</manifest>
		</jar>

		<mkdir dir="${build_server_maps}/"/>

		<javac srcdir="${src}/games/stendhal/server/maps/" destdir="${build_server_maps}" debug="true" debuglevel="source,lines"  source="1.5" target="1.5"
           includes="**/*.java"
           excludes="games/stendhal/server/maps/quests/**">
			<compilerarg value="-encoding"/>
			<compilerarg value="utf-8"/>
			<compilerarg value="-Xlint:unchecked"/>
			<classpath>
				<pathelement path="${build_server}"/>
				<pathelement path="${marauroa_jar}"/>
				<pathelement path="${log4j_jar}"/>
				<pathelement path="${junit_jar}"/>
			</classpath>
		</javac>

		<copy todir="${build_server_maps}/data/maps">
			<fileset dir="${tiled}">
				<include name="**/*.tmx"/>
			</fileset>
		</copy>

		<jar jarfile="${lib}/${maps_jarname}" basedir="${build_server_maps}"/>

		<property name="build_server_xmlconf" value="${buildroot}/build_server_xmlconf/"/>
		<mkdir dir="${build_server_xmlconf}/"/>

		<copy todir="${build_server_xmlconf}/data/conf">
			<fileset dir="data/conf">
				<include name="creatures.xml"/>
				<include name="items.xml"/>
				<include name="quests.xml"/>
				<include name="zones.xml"/>
				<include name="zones/*.xml"/>
			</fileset>
		</copy>

		<jar jarfile="${lib}/${xmlconf_jarname}" basedir="${build_server_xmlconf}"/>

		<property name="build_server_script" value="${buildroot}/build_server_script/"/>
		<mkdir dir="${build_server_script}/"/>
		<javac srcdir="${src}" destdir="${build_server_script}" debug="true" debuglevel="source,lines"  source="1.5" target="1.5"
           includes="games/stendhal/server/script/**">
			<compilerarg value="-encoding"/>
			<compilerarg value="utf-8"/>
			<compilerarg value="-Xlint:unchecked"/>
			<classpath>
				<pathelement path="${marauroa_jar}"/>
				<pathelement path="${log4j_jar}"/>
				<pathelement path="${junit_jar}"/>
				<pathelement path="${groovy_jar}"/>
				<pathelement path="${simple_jar}"/>
				<pathelement path="${lib}/${server_jarname}"/>
				<pathelement path="${lib}/${maps_jarname}"/>
			</classpath>
		</javac>

	</target>

        <target name="jar" depends="client_build, server_build" description="Builds Client and Server">
            <echo>Built client and server for NetBeans.</echo>
        </target>
        
        
        <!-- Runs the client -->
        <target name="client_run" depends="client_build" description="Runs the client">
            <property name="client_jarname" value="stendhal-${version}.jar"/>
            <property name="client_data" value="stendhal-data-${version}.jar"/>
            <property name="client_sound" value="stendhal-sound-data-${version}.jar"/>
            
            <mkdir dir="run"/>
            
            <copy todir="run/">
                <fileset file="build/lib/${client_jarname}"/>
                <fileset file="build/lib/${client_data}"/>
                <fileset file="build/lib/${client_sound}"/>
                <fileset file="libs/marauroa.jar"/>
                <fileset file="libs/log4j.jar"/>
            </copy>
            <exec command="java -Xmx256m -cp run/ -jar run/${client_jarname}"/>            
            <!-- we've run the program, so delete the jars -->
            <delete dir="run/"/>
    
        </target>
        
        <!-- Netbeans won't let you choose ant options, so this does it for us-->
        <target name="run" depends="client_run"  description="Runs client for netbeans trick"/>
        
	<target name="client_build" depends="init" description="Build JAR file for Stendhal client">
		<property name="client_jarname" value="stendhal-${version}.jar"/>
		<property name="client_starter_jarname" value="stendhal-starter-${version}.jar"/>
		<property name="client_data" value="stendhal-data-${version}.jar"/>
		<property name="client_sound_data" value="stendhal-sound-data-${version}.jar"/>
		<property name="client_prefilled_cache" value="stendhal-prefilled-cache-${version}.jar"/>

		<mkdir dir="${build_client}/"/>

		<javac srcdir="${src}" destdir="${build_client}" debug="true" debuglevel="source,lines" source="1.5" target="1.5"
           includes="games/stendhal/client/**, games/stendhal/common/**" 
           excludes="games/stendhal/server/**, games/stendhal/tools/**, games/stendhal/client/update/Starter.java">
			<compilerarg value="-encoding"/>
			<compilerarg value="utf-8"/>
			<compilerarg value="-Xlint:unchecked"/>
			<classpath>
				<pathelement path="${marauroa_jar}"/>
				<pathelement path="${log4j_jar}"/>
				<pathelement path="${junit_jar}"/>
			</classpath>
		</javac>
		
		<!-- compile Starter.java for Java 1.2. So we will be able to 
  		 display a dialogbox if running on an old Java Version -->
		<javac srcdir="${src}" destdir="${build_client}" debug="true" debuglevel="source,lines" source="1.2" target="1.2"
           includes="games/stendhal/client/update/Starter.java">
			<compilerarg value="-encoding"/>
			<compilerarg value="utf-8"/>
		</javac>
		<copy todir="${build_client}/games/stendhal/client/update">
			<fileset file="${src}/games/stendhal/client/update/game*.properties"/>
		</copy>

		<jar jarfile="${lib}/${client_starter_jarname}">
			<fileset dir="${build_client}">
	           <include name="games/stendhal/client/update/*"/>
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="games.stendhal.client.update.Starter"/>
			</manifest>
		</jar>

	  	<copy todir="${build_client}">
	      <fileset dir="data/precompiled">
	        <include name="*.so"/>
	      </fileset>
	    </copy>

		<jar jarfile="${lib}/${client_jarname}">
			<fileset dir="${build_client}"/>
			<manifest>
				<attribute name="Main-Class" value="games.stendhal.client.update.Starter"/>
				<attribute name="Class-path" value="log4j.jar marauroa.jar ${client_data} ${client_sound_data}"/>
			</manifest>
		</jar>

		<property name="build_client_data" value="${buildroot}/build_client_data/"/>
		<mkdir dir="${build_client_data}/"/>

		<copy todir="${build_client_data}/data/sprites">
			<fileset dir="${sprites}"/>
		</copy>

		<copy todir="${build_client_data}/data/docu">
			<fileset dir="${docu}"/>
		</copy>

		<copy todir="${build_client_data}/layers">
			<fileset dir="${layers}"/>
		</copy>

		<copy todir="${build_client_data}/data/tileset">
			<fileset dir="${tiled}/tileset"/>
		</copy>

		<copy todir="${build_client_data}/data/gui">
			<fileset dir="${data}">
				<exclude name="paneldrock*.jpg"/>
				<exclude name="panelmetal003.gif"/>
				<exclude name="panelrock016.jpg"/>
				<exclude name="panelwood006.jpg"/>
				<exclude name="panelwood032.gif"/>
				<exclude name="panelwood119.jpg"/>
			</fileset>
		</copy>

		<copy todir="${build_client_data}/data/conf/" file="data/conf/log4j.properties"/>
		<jar jarfile="${lib}/${client_data}" basedir="${build_client_data}"/>

		<property name="build_client_sound_data" value="${buildroot}/build_client_sound_data/"/>
		<mkdir dir="${build_client_sound_data}/"/>

		<copy todir="${build_client_sound_data}/data/sounds">
			<fileset dir="data/sounds">
				<include name="**.*"/>
			</fileset>
		</copy>

		<jar jarfile="${lib}/${client_sound_data}" basedir="${build_client_sound_data}"/>
	</target>

	<target name="docs" depends="server_build, client_build" description="Build javadocs for Stendhal">
		<javadoc packagenames="games.stendhal.*"           
           defaultexcludes="yes"
           destdir="${docs}"
           author="true"
           version="true"
           use="true"
           classpath="${classpath}"
           windowtitle="Stendhal API Documentation Version: ${version}">
			<fileset dir="${src}">
				<include name="**/*.java"/>
			</fileset>
		</javadoc>
	</target>

	<target name="compile" depends="server_build, client_build" description="Generates JAR files for both client and server"/>

    <condition property="exclude.signing" value="true">
      <not>
       <available file="keystore.ks"/>
      </not>
    </condition>
	
	<target name="sign_jars" depends="server_build, client_build" unless="exclude.signing">
		<signjar alias="${keystore.alias}" keystore="keystore.ks" storepass="${keystore.password}">
			<fileset dir="${lib}">
				<include name="**/*.jar"/>
			</fileset>
			<fileset file="${log4j_jar}"/>
			<fileset file="${marauroa_jar}"/>
		</signjar>
	</target>


	<target name="distworking" description="use dist instead">
		<echo>Deprecated: Please use ant dist</echo>
	</target>
	<target name="dist" depends="sign_jars, dist_binary, dist_source" description="Creates all the packages needed for a Stendhal release"/>
	<target name="dist_binary" depends="dist_server_binary,dist_client_binary,dist_client_no_sound_binary,dist_client_starter"/>

	<target name="dist_server_binary" depends="server_build">
		<mkdir dir="${buildroot}/stendhal-server-${version}"/>

		<copy todir="${buildroot}/stendhal-server-${version}/data/conf" file="data/conf/admins.list"/>

		<copy todir="${buildroot}/stendhal-server-${version}/data/script">
			<fileset dir="data/script">
				<include name="**"/>
			</fileset>
		</copy>
		<copy todir="${buildroot}/stendhal-server-${version}/data/script">
			<fileset dir="${buildroot}/build_server_script/">
				<include name="**"/>
			</fileset>
		</copy>

		<copy todir="${buildroot}/stendhal-server-${version}/web">
			<fileset dir="web"/>
		</copy>


		<copy todir="${buildroot}/stendhal-server-${version}" file="${groovy_jar}"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="${simple_jar}"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="${velocity_jar}"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="${velocity-dep_jar}"/>

		<copy todir="${buildroot}/stendhal-server-${version}" file="${lib}/${server_jarname}"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="${lib}/${maps_jarname}"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="${lib}/${xmlconf_jarname}"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="AUTHORS"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="BUGS"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="COPYING"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="LICENSE"/>
		<copy todir="${buildroot}/stendhal-server-${version}" file="README"/>
		<zip destfile="${buildroot}/stendhal-server-${version}.zip" 
			basedir="${buildroot}/stendhal-server-${version}"/>
		<delete dir="${buildroot}/stendhal-server-${version}"/>
	</target>

	<target name="dist_client_binary" depends="client_build">
		<mkdir dir="${buildroot}/stendhal-${version}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="${log4j_jar}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="${marauroa_jar}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="${lib}/${client_jarname}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="${lib}/${client_sound_data}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="${lib}/${client_data}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="AUTHORS"/>
		<copy todir="${buildroot}/stendhal-${version}" file="BUGS"/>
		<copy todir="${buildroot}/stendhal-${version}" file="COPYING"/>
		<copy todir="${buildroot}/stendhal-${version}" file="LICENSE"/>
		<copy todir="${buildroot}/stendhal-${version}" file="README"/>
		<zip destfile="${buildroot}/stendhal-FULL-${version}.zip" 
         	basedir="${buildroot}/stendhal-${version}"/>
		<delete dir="${buildroot}/stendhal-${version}"/>
	</target>

	<target name="dist_client_no_sound_binary">
		<mkdir dir="${buildroot}/stendhal-${version}"/>

		<copy todir="${buildroot}/stendhal-${version}" file="${log4j_jar}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="${marauroa_jar}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="${lib}/${client_jarname}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="${lib}/${client_data}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="AUTHORS"/>
		<copy todir="${buildroot}/stendhal-${version}" file="BUGS"/>
		<copy todir="${buildroot}/stendhal-${version}" file="COPYING"/>
		<copy todir="${buildroot}/stendhal-${version}" file="LICENSE"/>
		<copy todir="${buildroot}/stendhal-${version}" file="README"/>
		<zip destfile="${buildroot}/stendhal-${version}.zip" 
			basedir="${buildroot}/stendhal-${version}"/>
		<delete dir="${buildroot}/stendhal-${version}"/>
	</target>

	<target name="dist_client_starter">
		<mkdir dir="${buildroot}/stendhal-${version}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="${lib}/${client_starter_jarname}"/>
		<copy todir="${buildroot}/stendhal-${version}" file="AUTHORS"/>
		<copy todir="${buildroot}/stendhal-${version}" file="BUGS"/>
		<copy todir="${buildroot}/stendhal-${version}" file="COPYING"/>
		<copy todir="${buildroot}/stendhal-${version}" file="LICENSE"/>
		<copy todir="${buildroot}/stendhal-${version}" file="README"/>
		<zip destfile="${buildroot}/stendhal-starter-${version}.zip" 
			basedir="${buildroot}/stendhal-${version}"/>
		<delete dir="${buildroot}/stendhal-${version}"/>
	</target>

	<target name="dist_source">
		<mkdir dir="${buildroot}/stendhal-${version}-src"/>
		<copy todir="${buildroot}/stendhal-${version}-src/src">
			<fileset dir="src"/>
		</copy>
		<copy todir="${buildroot}/stendhal-${version}-src/data">
			<fileset dir="data">
                <!-- There is a 4MB OGG there! -->
				<exclude name="music/**/*"/>
            </fileset>
		</copy>

		<copy todir="${buildroot}/stendhal-server-${version}/web">
			<fileset dir="web"/>
		</copy>

		<copy todir="${buildroot}/stendhal-${version}-src/tiled">
			<fileset dir="${tiled}"/>
		</copy>

		<copy todir="${buildroot}/stendhal-${version}-src" file="build.xml"/>
		<copy todir="${buildroot}/stendhal-${version}-src" file="build.ant.properties"/>
		<copy todir="${buildroot}/stendhal-${version}-src" file="AUTHORS"/>
		<copy todir="${buildroot}/stendhal-${version}-src" file="BUGS"/>
		<copy todir="${buildroot}/stendhal-${version}-src" file="COPYING"/>
		<copy todir="${buildroot}/stendhal-${version}-src" file="LICENSE"/>
		<copy todir="${buildroot}/stendhal-${version}-src" file="README"/>

		<tar destfile="${buildroot}/stendhal-${version}-src.tar.gz" compression="gzip">
			<tarfileset dir="${buildroot}/stendhal-${version}-src" prefix="stendhal-${version}">
				<exclude name="**/CVS/**"/>
			</tarfileset>
		</tar>

		<delete dir="${buildroot}/stendhal-${version}-src"/>
	</target>


	<target name="rendermaps" description="Converts the *.tmx files to PNG images scaled 1:16">
		<property name="build_tiled_convertmaps" value="${buildroot}/build_tiled_convertmaps/"/>
		<mkdir dir="${build_tiled_convertmaps}/"/>

		<javac srcdir="${src}" destdir="${build_tiled_convertmaps}" debug="true" debuglevel="source,lines"
           includes="games/stendhal/tools/MapConverter.java">
			<compilerarg value="-encoding"/>
			<compilerarg value="utf-8"/>
			<compilerarg value="-Xlint:unchecked"/>
			<classpath>
				<pathelement path="${build_tiled_convertmaps}"/>
				<pathelement path="${marauroa_jar}"/>
				<pathelement path="${log4j_jar}"/>
				<pathelement path="${tiled_jar}"/>
			</classpath>
		</javac>

		<taskdef name="mapconverter" classname="games.stendhal.tools.MapConverter">
			<classpath>
				<pathelement path="${build_tiled_convertmaps}"/>
				<pathelement path="${tiled_jar}"/>
			</classpath>
		</taskdef>

		<mkdir dir="tiled/world/"/>
		<mapconverter imagePath="${tiled}/world/">
			<fileset dir="tiled/">
				<include name="Level */**/*.tmx"/>
			</fileset>
		</mapconverter>
	</target>

	<target name="updatemaps" description="Load and save TMX files to fix tilesets changes.">
		<property name="build_tiled_convertmaps" value="${buildroot}/build_tiled_convertmaps/"/>
		<mkdir dir="${build_tiled_convertmaps}/"/>

		<javac srcdir="${src}" destdir="${build_tiled_convertmaps}" debug="true" debuglevel="source,lines"
           includes="games/stendhal/tools/MapUpdater.java">
			<compilerarg value="-encoding"/>
			<compilerarg value="utf-8"/>
			<classpath>
				<pathelement path="${build_tiled_convertmaps}"/>
				<pathelement path="${marauroa_jar}"/>
				<pathelement path="${log4j_jar}"/>
				<pathelement path="${tiled_jar}"/>
			</classpath>
		</javac>

		<taskdef name="mapupdater" classname="games.stendhal.tools.MapUpdater">
			<classpath>
				<pathelement path="${build_tiled_convertmaps}"/>
				<pathelement path="${tiled_jar}"/>
			</classpath>
		</taskdef>

		<mapupdater>
			<fileset dir="tiled/">
				<include name="Level */**/*.tmx"/>
			</fileset>
		</mapupdater>
	</target>

	<target name="compile_tests" description="Compile all tests" depends="server_build, client_build">
		<mkdir dir="${build_tests}"/>

		<javac srcdir="tests" destdir="${build_tests}" debug="true" debuglevel="source,lines" source="1.5" target="1.5">
			<include name="**/*.java"/>

			<compilerarg value="-encoding"/>
			<compilerarg value="utf8"/>

			<compilerarg value="-Xlint:unchecked"/>

			<classpath>
				<pathelement path="${build_client}"/>
				<pathelement path="${build_server}"/>
				<pathelement path="${build_server_maps}"/>
				<pathelement path="${marauroa_jar}"/>
				<pathelement path="${log4j_jar}"/>
				<pathelement path="${junit_jar}"/>
				<pathelement path="${groovy_jar}"/>
				<pathelement path="${simple_jar}"/>
				<pathelement path="${velocity_jar}"/>
			</classpath>
		</javac>
	</target>

	<target name="tests" description="Compile and run tests" depends="compile_tests">
		<!-- Run tests here -->
	</target>

	<target name="checkxml" description="Verify XML files are well-formed">
		<xmlvalidate failonerror="yes" lenient="yes" warn="yes">
			<fileset file="data/conf/creatures.xml"/>
			<fileset file="data/conf/items.xml"/>
			<fileset file="data/conf/npc.xml"/>
			<fileset file="data/conf/quests.xml"/>
			<fileset file="data/conf/zones.xml"/>

			<fileset dir="data/conf/zones">
				<include name="*.xml"/>
			</fileset>
		</xmlvalidate>
	</target>
        
</project>
