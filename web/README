-------------------------------------------------------------------------------
| This program is free software; you can redistribute it and/or modify         
| it under the terms of the GNU General Public License as published by
| the Free Software Foundation.
| 
| This program is distributed in the hope that it will be useful,
| but WITHOUT ANY WARRANTY; without even the implied warranty of
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
| doc/GPL.license file for more details.
-------------------------------------------------------------------------------

Stendhal Website
----------------

The Stendhal website is created on the built-in StendhalHttpServer
that listens to HTTP requests on the same port number that is
used for the UDP connections for gameplay.

It is based on the sourceforge project simple http:
   http://sourceforge.net/projects/simpleweb
which is released under the LGPL

The StendhalHttpServer supports plain html, groovy scripts and ssi like include 
tags. It is also able to deliver images and other resources with the help of the 
java classloader.

INSTALLATION

Copy this folder to the server location where Marauroa / 
Stendhal is installed and run from, 
e.g. if Stendhal is located in
      /usr/local/stendhal
the file structure should be 
      /usr/local/stendhal/web
      /usr/local/stendhal/web/script/...
      /usr/local/stendhal/web/html/...

Download the latest simple.jar from sourceforge and add it to
the classpath of marauroa / stendhal. Development was done and
tested with simple-3.1.1.jar.

Enable the StendhalServerExtension in the marauroa.ini file:

  # load StendhalServerExtension(s)
  server_extension=groovy,http
  groovy=games.stendhal.server.scripting.StendhalGroovyRunner
  http=games.stendhal.server.StendhalHttpServer
  http.port=80

Add stendhal-data-xx.x.jar to the classpath of marauroa / stendhal
so the scripts can access the sprite gfx. On unix-like system you need
root to bind to the standard-port 80. In order not to run Stendhal
as root you can bind to a high port (like 8080) and use a program
called rinetd to forward request.

/etc/rinetd.conf:
0.0.0.0 80 127.0.0.1 8080

Restart Stendhal and enjoy :)

SOME NOTES

The StendhalHttpServer is currently configured like this:

The file service delivers plain files based on a cache Context:

    engine.load("file","games.stendhal.server.StendhalHttpServer$FileService");
    engine.link("*","file");
    
The classloader service currently delivers resources from the "data/"
path as well as jar archives:
    
    engine.load("data","games.stendhal.server.StendhalHttpServer$DataService");
    engine.link("/data/*","data");
    engine.link("*.jar","data");
    
The groovy scripts are used from 2 different paths: one that receives
references to the ruleprocessor and world objects (web/script) and one that doesn't
(goovy scripts that are placed in the servers document root). So it is easy
to distinguish based on server login who is allowed to access game object data or
put scripts on the server that do that. With the current declaration level
of rules and world, they can not be accessible from other classes if not
passed to as explicit parameters. The document root groovy scripts only have
access to statistic objects and actually serve as a replacement for php to
add dynamic functions.
    
    engine.load("script","games.stendhal.server.StendhalHttpServer$GameScriptService");
    engine.link("/stendhal.*","script");
    
    engine.load("securescript","games.stendhal.server.StendhalHttpServer$SecureScriptService");
    engine.link("*.groovy","securescript");

For realtime environments it is highly advised to access the webserver
through apache proxy mode or behind a squid to avoid the game being
slowed down by heavy http traffic.

Legal
-----
Stendhal(c) is copyright of Miguel Angel Blanch Lardin, 2005
arianne_rpg at users dot sourceforge dot net

StendhalHttpServer Extension is copyright of Jo Seiler, 2006
intensifly at users dot sourceforge dot net
